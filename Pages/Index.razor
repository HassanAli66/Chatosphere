@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chatosphere</PageTitle>

<div class="form-group">
    <label class="label">
        User:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <input class="input" @bind="userInput" />
    </label>
</div>
<br />
<div class="form-group">
    <label class="label">
        Message:
        <textarea class="textarea" @bind="messageInput" rows="3" cols="50"></textarea>
    </label>
</div>
<button class="send-btn" @onclick="Send" disabled="@(!IsConnected)">Send</button>
<style>
    .form-group {
        margin-bottom: 20px;
    }

    .label {
        font-size: 20px;
        font-weight: bold;
        color: #fff;
        background: linear-gradient(to right, #036624, #006616);
        padding: 10px;
        border-radius: 5px;
    }

    .input {
        width: 100%;
        padding: 10px;
        font-size: 18px;
        border-radius: 5px;
        border: none;
        outline: none;
        color: #fff;
        background: linear-gradient(to bottom, #000000, #424242);
    }

    .textarea {
        width: 100%;
        padding: 10px;
        font-size: 18px;
        border-radius: 5px;
        border: none;
        outline: none;
        resize: none;
        height: auto;
        background: linear-gradient(to bottom, #000000, #424242);
        color: #fff;
    }
     .messages-list {
        list-style: none;
        margin: 0;
        padding: 0;
        background: linear-gradient(to right, #1a1a1a, #006633);
        border-radius: 8px;
        box-shadow: 0px 0px 10px 2px rgba(0, 0, 0, 0.3);
    }

    .messages-list li {
        margin: 10px;
        padding: 10px;
        font-size: 16px;
        color: white;
        background: linear-gradient(to right, #006633, #1a1a1a);
        border-radius: 8px;
        box-shadow: 0px 0px 5px 2px rgba(0, 0, 0, 0.2);
    }
</style>
<hr>

<ul class="messages-list" id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}   -                                                 {DateTime.Now.ToString("dddd, dd MMMM yyyy hh:mm tt")}";
            messages.Insert(0,encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            }
        messageInput="";
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}